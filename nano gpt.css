<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Kanban de Airdrops - Pro Edition</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet">
    <link rel="manifest" href="manifest.json">
    <style>
        :root {
            --bg-primary: #181824;
            --bg-secondary: #23243a;
            --text-primary: #fff;
            --text-secondary: #e0e0e0;
            --card-bg: #1d1e30;
            --accent-blue: #2563eb;
            --accent-green: #16a34a;
            --accent-orange: #f59e42;
            --accent-red: #ef4444;
            --accent-purple: #a855f7;
            --accent-cyan: #06b6d4;
            --shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            --shadow-md: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
            --shadow-lg: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
        }

        [data-theme="light"] {
            --bg-primary: #f0f2f5;
            --bg-secondary: #ffffff;
            --text-primary: #1a1a2e;
            --text-secondary: #4a4a6a;
            --card-bg: #ffffff;
            --shadow-sm: 0 1px 3px rgba(0,0,0,0.08), 0 1px 2px rgba(0,0,0,0.12);
            --shadow-md: 0 3px 6px rgba(0,0,0,0.12), 0 3px 6px rgba(0,0,0,0.16);
            --shadow-lg: 0 10px 20px rgba(0,0,0,0.12), 0 6px 6px rgba(0,0,0,0.16);
        }

        body {
            background: var(--bg-primary);
            color: var(--text-primary);
            min-height: 100vh;
            margin: 0;
            font-family: 'Segoe UI', Arial, sans-serif;
            transition: background 0.3s ease, color 0.3s ease;
        }

        .board {
            display: flex;
            gap: 24px;
            overflow-x: auto;
            padding: 40px 24px 80px 24px;
            scroll-behavior: smooth;
            scrollbar-width: thin;
        }

        .board::-webkit-scrollbar {
            height: 8px;
        }

        .board::-webkit-scrollbar-track {
            background: var(--bg-primary);
        }

        .board::-webkit-scrollbar-thumb {
            background-color: var(--bg-secondary);
            border-radius: 20px;
        }

        .trello-column {
            border-radius: 14px;
            min-width: 320px;
            max-width: 340px;
            padding: 18px 12px 18px 12px;
            box-shadow: var(--shadow-md);
            display: flex;
            flex-direction: column;
            margin-bottom: 20px;
            background: var(--bg-secondary);
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .trello-column:hover {
            box-shadow: var(--shadow-lg);
        }

        .trello-column .column-title {
            font-size: 1.15rem;
            font-weight: bold;
            margin-bottom: 16px;
            color: var(--text-primary);
            letter-spacing: 0.5px;
        }

        .trello-card {
            background: var(--card-bg);
            border-radius: 8px;
            margin-bottom: 14px;
            padding: 16px 14px;
            color: var(--text-primary);
            box-shadow: var(--shadow-sm);
            border-left: 7px solid #444;
            transition: all 0.3s ease;
            cursor: grab;
        }

        .trello-card:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
        }

        .trello-card.dragging {
            opacity: 0.6;
            cursor: grabbing;
        }

        .trello-column.drag-over {
            background-color: rgba(37, 99, 235, 0.1);
        }

        /* Cores das colunas e cartões */
        .trello-column.avisos      { border-top: 6px solid var(--accent-red); }
        .trello-column.diaria      { border-top: 6px solid var(--accent-blue); }
        .trello-column.semanal     { border-top: 6px solid var(--accent-green); }
        .trello-column.quinzenal   { border-top: 6px solid var(--accent-orange); }
        .trello-column.mensal      { border-top: 6px solid #fbbf24; }
        .trello-column.trimestral  { border-top: 6px solid var(--accent-cyan); }
        .trello-column.semestral   { border-top: 6px solid #22d3ee; }
        .trello-column.novos       { border-top: 6px solid var(--accent-purple); }

        .trello-card.red      { border-left: 7px solid var(--accent-red); }
        .trello-card.orange   { border-left: 7px solid var(--accent-orange); }
        .trello-card.yellow   { border-left: 7px solid #fbbf24; }
        .trello-card.green    { border-left: 7px solid var(--accent-green); }
        .trello-card.blue     { border-left: 7px solid var(--accent-blue); }
        .trello-card.cyan     { border-left: 7px solid var(--accent-cyan); }
        .trello-card.purple   { border-left: 7px solid var(--accent-purple); }
        .trello-card.gray     { border-left: 7px solid #6b7280; }

        .btn-sm { 
            font-size: 0.9em; 
            padding: 2px 8px; 
            margin-left: 2px;
        }

        .tag {
            display: inline-block;
            font-size: 0.75rem;
            padding: 2px 8px;
            border-radius: 12px;
            margin-right: 4px;
            margin-bottom: 4px;
            color: white;
        }

        .checklist-item {
            display: flex;
            align-items: center;
            margin-bottom: 6px;
        }

        .checklist-item input[type="checkbox"] {
            margin-right: 8px;
        }

        .completed {
            text-decoration: line-through;
            opacity: 0.7;
        }

        .console-container {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 0.95em;
            max-height: 120px;
            overflow-y: auto;
            z-index: 9999;
            border-top: 2px solid rgba(255,255,255,0.1);
            padding: 6px 12px;
            box-shadow: var(--shadow-md);
            transition: max-height 0.3s ease;
        }

        .console-container.collapsed {
            max-height: 32px;
            overflow: hidden;
        }

        .console-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
        }

        .fade-in {
            animation: fadeIn 0.5s;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        #toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }

        .kanban-toast {
            min-width: 250px;
            margin-bottom: 10px;
            animation: slideIn 0.3s, fadeOut 0.5s 2.5s forwards;
        }

        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }

        /* Responsivo */
        @media (max-width: 768px) {
            .board {
                padding: 20px 10px 80px 10px;
            }

            .trello-column {
                min-width: 280px;
            }

            .form-controls {
                flex-direction: column;
            }

            .form-controls > * {
                margin-bottom: 10px;
            }
        }

        /* Botão de tema */
        .theme-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            background: var(--bg-secondary);
            border: none;
            color: var(--text-primary);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: var(--shadow-md);
            cursor: pointer;
        }

        /* Stats Dashboard */
        .stats-container {
            background: var(--bg-secondary);
            border-radius: 14px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: var(--shadow-md);
        }

        .stats-row {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }

        .stat-card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 15px;
            flex: 1 1 200px;
            box-shadow: var(--shadow-sm);
            transition: transform 0.2s;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        /* Calendário */
        .calendar-view {
            background: var(--bg-secondary);
            border-radius: 14px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: var(--shadow-md);
        }

        /* Badges de prioridade */
        .priority-high {
            background-color: var(--accent-red);
        }

        .priority-medium {
            background-color: var(--accent-orange);
        }

        .priority-low {
            background-color: var(--accent-green);
        }
    </style>
</head>
<body>
    <!-- Botão de alternância de tema -->
    <button class="theme-toggle" id="theme-toggle">
        <i class="fas fa-moon" id="theme-icon"></i>
    </button>

    <div class="container">
        <div class="d-flex justify-content-between align-items-center mt-4 mb-3">
            <h2>Gerenciador de Airdrops <span class="badge bg-primary">Pro</span></h2>
            <div>
                <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#dashboardModal">
                    <i class="fas fa-chart-line"></i> Dashboard
                </button>
                <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#calendarModal">
                    <i class="fas fa-calendar-alt"></i> Calendário
                </button>
            </div>
        </div>

        <!-- Barra de filtros e busca -->
        <div class="card bg-secondary bg-opacity-10 mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" id="busca" class="form-control" placeholder="Buscar...">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <select id="filtro-status" class="form-select">
                            <option value="">Status</option>
                            <option value="Em andamento">Em andamento</option>
                            <option value="Concluído">Concluído</option>
                            <option value="Aguardando">Aguardando</option>
                            <option value="Rejeitado">Rejeitado</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select id="filtro-prioridade" class="form-select">
                            <option value="">Prioridade</option>
                            <option value="Alta">Alta</option>
                            <option value="Média">Média</option>
                            <option value="Baixa">Baixa</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <div class="btn-group w-100">
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalColuna">
                                <i class="fas fa-plus"></i> Nova Coluna
                            </button>
                            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#modalCartao">
                                <i class="fas fa-plus"></i> Novo Cartão
                            </button>
                            <button class="btn btn-info" onclick="exportarKanban()">
                                <i class="fas fa-file-export"></i>
                            </button>
                            <input type="file" id="importar-arquivo" style="display:none" accept="application/json" onchange="importarKanban(event)">
                            <button class="btn btn-info" onclick="document.getElementById('importar-arquivo').click()">
                                <i class="fas fa-file-import"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quadro Kanban -->
        <div class="board" id="kanban-board"></div>

        <!-- Contêiner de Toast -->
        <div id="toast-container"></div>
    </div>

    <!-- Modal de Coluna -->
    <div class="modal fade" id="modalColuna" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title">Nova Coluna</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <form id="form-coluna">
                        <input type="hidden" id="coluna-id">
                        <div class="mb-3">
                            <label for="nome-coluna" class="form-label">Nome da Coluna</label>
                            <input type="text" class="form-control" id="nome-coluna" required>
                        </div>
                        <div class="mb-3">
                            <label for="cor-coluna" class="form-label">Cor da Coluna</label>
                            <select class="form-select" id="cor-coluna">
                                <option value="#2563eb">Azul</option>
                                <option value="#16a34a">Verde</option>
                                <option value="#f59e42">Laranja</option>
                                <option value="#ef4444">Vermelho</option>
                                <option value="#a855f7">Roxo</option>
                                <option value="#06b6d4">Ciano</option>
                                <option value="#6b7280">Cinza</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-success w-100">Salvar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Cartão -->
    <div class="modal fade" id="modalCartao" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalCartaoLabel">Novo Cartão</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <form id="form-modal-cartao">
                        <input type="hidden" id="modal-cartao-id">
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <label for="modal-cartao-titulo" class="form-label">Título</label>
                                <input type="text" class="form-control" id="modal-cartao-titulo" required>
                            </div>
                            <div class="col-md-4">
                                <label for="modal-cartao-coluna-id" class="form-label">Coluna</label>
                                <select class="form-select" id="modal-cartao-coluna-id" required></select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label for="modal-cartao-descricao" class="form-label">Descrição</label>
                                <textarea class="form-control" id="modal-cartao-descricao" rows="2"></textarea>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="modal-cartao-status" class="form-label">Status</label>
                                <select class="form-select" id="modal-cartao-status">
                                    <option value="Em andamento">Em andamento</option>
                                    <option value="Concluído">Concluído</option>
                                    <option value="Aguardando">Aguardando</option>
                                    <option value="Rejeitado">Rejeitado</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="modal-cartao-prioridade" class="form-label">Prioridade</label>
                                <select class="form-select" id="modal-cartao-prioridade">
                                    <option value="Alta">Alta</option>
                                    <option value="Média">Média</option>
                                    <option value="Baixa">Baixa</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="modal-cartao-prazo" class="form-label">Prazo</label>
                                <input type="date" class="form-control" id="modal-cartao-prazo">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="modal-cartao-link" class="form-label">Link do Projeto</label>
                                <input type="url" class="form-control" id="modal-cartao-link">
                            </div>
                            <div class="col-md-6">
                                <label for="modal-cartao-tags" class="form-label">Tags (separadas por vírgula)</label>
                                <input type="text" class="form-control" id="modal-cartao-tags" placeholder="ex: ethereum, defi, nft">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Checklist</label>
                            <div id="checklist-container" class="mb-2">
                                <!-- Itens do checklist serão inseridos aqui -->
                            </div>
                            <div class="input-group">
                                <input type="text" id="novo-checklist-item" class="form-control" placeholder="Nova tarefa...">
                                <button type="button" class="btn btn-outline-primary" id="add-checklist-item">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="modal-cartao-obs" class="form-label">Observações</label>
                            <textarea class="form-control" id="modal-cartao-obs" rows="2"></textarea>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-outline-secondary me-2" data-bs-dismiss="modal">Cancelar</button>
                            <button type="submit" class="btn btn-success">Salvar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Dashboard -->
    <div class="modal fade" id="dashboardModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title">Dashboard</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <div class="stats-row mb-4">
                        <div class="stat-card bg-primary bg-opacity-25">
                            <div class="stat-value" id="stat-total">0</div>
                            <div class="stat-label">Total de Airdrops</div>
                        </div>
                        <div class="stat-card bg-success bg-opacity-25">
                            <div class="stat-value" id="stat-concluidos">0</div>
                            <div class="stat-label">Concluídos</div>
                        </div>
                        <div class="stat-card bg-warning bg-opacity-25">
                            <div class="stat-value" id="stat-andamento">0</div>
                            <div class="stat-label">Em Andamento</div>
                        </div>
                        <div class="stat-card bg-danger bg-opacity-25">
                            <div class="stat-value" id="stat-atrasados">0</div>
                            <div class="stat-label">Atrasados</div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <h5>Distribuição por Status</h5>
                            <canvas id="status-chart" height="250"></canvas>
                        </div>
                        <div class="col-md-6">
                            <h5>Distribuição por Prioridade</h5>
                            <canvas id="priority-chart" height="250"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Calendário -->
    <div class="modal fade" id="calendarModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title">Calendário de Prazos</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <div id="calendar"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Confirmação -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationTitle">Confirmação</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <p id="confirmationMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-danger" id="confirmationConfirm">Confirmar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Console de Atividades -->
    <div id="console-atividades" class="console-container">
        <div class="console-header" id="console-header">
            <b>Console de Atividades</b>
            <button class="btn btn-sm btn-outline-secondary" id="toggle-console">
                <i class="fas fa-chevron-up" id="console-icon"></i>
            </button>
        </div>
        <div id="console-log"></div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>

    <script>
    /**
     * Módulo para adicionar suporte a PWA
     */
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('/sw.js').catch(error => {
                console.log('Service Worker registration failed:', error);
            });
        });
    }

    /**
     * Módulo Model - Gerencia os dados e operações de CRUD
     */
    class KanbanModel {
        constructor() {
            this.STORAGE_KEY = 'kanbanAirdrop';
            this.dados = this.carregarDados();
            this.listeners = [];
        }

        /**
         * Carrega dados do localStorage ou usa os padrões
         * @returns {Array} Dados do kanban
         */
        carregarDados() {
            try {
                const dadosArmazenados = localStorage.getItem(this.STORAGE_KEY);
                if (dadosArmazenados) {
                    return JSON.parse(dadosArmazenados);
                }
                return this.dadosPadrao();
            } catch (error) {
                console.error('Erro ao carregar dados:', error);
                return this.dadosPadrao();
            }
        }

        /**
         * Salva dados no localStorage
         */
        salvarDados() {
            try {
                localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.dados));
                this.notificarListeners();
            } catch (error) {
                console.error('Erro ao salvar dados:', error);
                toast('Erro ao salvar dados', 'danger');
            }
        }

        /**
         * Dados padrão para inicializar o kanban
         * @returns {Array} Dados iniciais
         */
        dadosPadrao() {    /**
            * Utilidade para adicionar dias a uma data
            */
           addDays(date, days) {
               const copy = new Date(Number(date));
               copy.setDate(date.getDate() + days);
               return copy;
           }
       
           /**
            * Adiciona um listener para mudanças nos dados
            * @param {Function} callback Função a ser chamada quando os dados mudarem
            */
           addListener(callback) {
               this.listeners.push(callback);
           }
       
           /**
            * Notifica todos os listeners sobre mudanças
            */
           notificarListeners() {
               this.listeners.forEach(callback => callback(this.dados));
           }
       
           /**
            * Obtém todas as colunas
            * @returns {Array} Colunas do kanban
            */
           getColunas() {
               return [...this.dados];
           }
       
           /**
            * Gera um ID único para uma nova coluna
            * @returns {Number} Novo ID
            */
           gerarNovoIdColuna() {
               return this.dados.length ? Math.max(...this.dados.map(c => c.id)) + 1 : 1;
           }
       
           /**
            * Gera um ID único para um novo cartão
            * @returns {Number} Novo ID
            */
           gerarNovoIdCartao() {
               const cards = this.dados.flatMap(c => c.cards);
               return cards.length ? Math.max(...cards.map(c => c.id)) + 1 : 1;
           }
       
           /**
            * Adiciona uma nova coluna
            * @param {String} nome Nome da coluna
            * @param {String} color Cor da coluna
            */
           adicionarColuna(nome, color) {
               const novoId = this.gerarNovoIdColuna();
               this.dados.push({
                   id: novoId,
                   name: nome,
                   color: color || "#2563eb",
                   order: this.dados.length + 1,
                   cards: []
               });
               this.salvarDados();
               return novoId;
           }
       
           /**
            * Edita uma coluna existente
            * @param {Number} id ID da coluna
            * @param {String} nome Novo nome
            * @param {String} color Nova cor
            */
           editarColuna(id, nome, color) {
               const coluna = this.dados.find(c => c.id === id);
               if (coluna) {
                   coluna.name = nome;
                   if (color) coluna.color = color;
                   this.salvarDados();
                   return true;
               }
               return false;
           }
       
           /**
            * Remove uma coluna
            * @param {Number} id ID da coluna a remover
            */
           removerColuna(id) {
               this.dados = this.dados.filter(c => c.id !== id);
               this.salvarDados();
           }
       
           /**
            * Adiciona um novo cartão
            * @param {Object} cartao Dados do cartão 
            */
           adicionarCartao(cartao) {
               const coluna = this.dados.find(c => c.id === cartao.colunaId);
               if (coluna) {
                   const novoId = this.gerarNovoIdCartao();
                   const novoCartao = {
                       id: novoId,
                       title: cartao.titulo,
                       description: cartao.descricao || "",
                       status: cartao.status || "Em andamento",
                       priority: cartao.prioridade || "Média",
                       prazo: cartao.prazo || null,
                       link: cartao.link || "",
                       tags: cartao.tags || [],
                       checklist: cartao.checklist || [],
                       obs: cartao.obs || "",
                       created_at: new Date().toISOString(),
                       updated_at: new Date().toISOString()
                   };
                   coluna.cards.push(novoCartao);
                   this.salvarDados();
                   return novoId;
               }
               return null;
           }
       
           /**
            * Edita um cartão existente
            * @param {Number} colunaId ID da coluna
            * @param {Number} cartaoId ID do cartão
            * @param {Object} dadosCartao Novos dados
            */
           editarCartao(colunaId, cartaoId, dadosCartao) {
               const coluna = this.dados.find(c => c.id === colunaId);
               if (coluna) {
                   const cartao = coluna.cards.find(c => c.id === cartaoId);
                   if (cartao) {
                       Object.assign(cartao, {
                           ...dadosCartao,
                           updated_at: new Date().toISOString()
                       });
                       this.salvarDados();
                       return true;
                   }
               }
               return false;
           }
       
           /**
            * Move um cartão para outra coluna
            * @param {Number} cartaoId ID do cartão
            * @param {Number} colunaOrigemId ID da coluna de origem
            * @param {Number} colunaDestinoId ID da coluna de destino
            */
           moverCartao(cartaoId, colunaOrigemId, colunaDestinoId) {
               try {
                   const colunaOrigem = this.dados.find(c => c.id === colunaOrigemId);
                   const colunaDestino = this.dados.find(c => c.id === colunaDestinoId);
       
                   if (!colunaOrigem || !colunaDestino) return false;
       
                   const indiceCartao = colunaOrigem.cards.findIndex(c => c.id === cartaoId);
                   if (indiceCartao === -1) return false;
       
                   const cartao = colunaOrigem.cards[indiceCartao];
                   colunaOrigem.cards.splice(indiceCartao, 1);
                   colunaDestino.cards.push({...cartao, updated_at: new Date().toISOString()});
       
                   this.salvarDados();
                   return true;
               } catch (error) {
                   console.error("Erro ao mover cartão:", error);
                   return false;
               }
           }
       
           /**
            * Remove um cartão
            * @param {Number} colunaId ID da coluna
            * @param {Number} cartaoId ID do cartão
            */
           removerCartao(colunaId, cartaoId) {
               const coluna = this.dados.find(c => c.id === colunaId);
               if (coluna) {
                   coluna.cards = coluna.cards.filter(c => c.id !== cartaoId);
                   this.salvarDados();
                   return true;
               }
               return false;
           }
       
           /**
            * Obtém estatísticas dos dados
            */
           getEstatisticas() {
               const today = new Date();
               const cards = this.dados.flatMap(c => c.cards);
       
               const porStatus = {
                   'Em andamento': 0,
                   'Concluído': 0,
                   'Aguardando': 0,
                   'Rejeitado': 0
               };
       
               const porPrioridade = {
                   'Alta': 0,
                   'Média': 0,
                   'Baixa': 0
               };
       
               let atrasados = 0;
       
               cards.forEach(card => {
                   // Contagem por status
                   porStatus[card.status] = (porStatus[card.status] || 0) + 1;
       
                   // Contagem por prioridade
                   porPrioridade[card.priority] = (porPrioridade[card.priority] || 0) + 1;
       
                   // Contagem de atrasados
                   if (card.prazo && card.status !== 'Concluído') {
                       const prazoDate = new Date(card.prazo);
                       if (prazoDate < today) atrasados++;
                   }
               });
       
               return {
                   total: cards.length,
                   porStatus,
                   porPrioridade,
                   concluidos: porStatus['Concluído'] || 0,
                   emAndamento: porStatus['Em andamento'] || 0,
                   atrasados
               };
           }
       
           /**
            * Exporta os dados do kanban
            * @returns {String} Dados em formato JSON
            */
           exportarDados() {
               return JSON.stringify(this.dados, null, 2);
           }
       
           /**
            * Importa dados para o kanban
            * @param {String} jsonData Dados em formato JSON
            */
           importarDados(jsonData) {
               try {
                   const dados = JSON.parse(jsonData);
                   if (!Array.isArray(dados)) throw new Error("Formato inválido");
                   this.dados = dados;
                   this.salvarDados();
                   return true;
               } catch (error) {
                   console.error("Erro ao importar dados:", error);
                   return false;
               }
           }
       }
       
       /**
        * Módulo View - Responsável pela renderização da interface
        */
       class KanbanView {
           constructor(model, controller) {
               this.model = model;
               this.controller = controller;
               this.kanbanBoard = document.getElementById('kanban-board');
               this.selectColunas = document.getElementById('modal-cartao-coluna-id');
               this.theme = localStorage.getItem('kanban-theme') || 'dark';
       
               // Aplicar tema inicial
               this.applyTheme(this.theme);
       
               // Configurar listeners para interface
               this.setupEventListeners();
           }
       
           /**
            * Configura event listeners para elementos da interface
            */
           setupEventListeners() {
               // Toggle do console de atividades
               document.getElementById('toggle-console').addEventListener('click', () => {
                   const consoleEl = document.getElementById('console-atividades');
                   consoleEl.classList.toggle('collapsed');
                   const icon = document.getElementById('console-icon');
                   icon.className = consoleEl.classList.contains('collapsed') ? 'fas fa-chevron-down' : 'fas fa-chevron-up';
               });
       
               // Toggle do tema claro/escuro
               document.getElementById('theme-toggle').addEventListener('click', () => {
                   this.theme = this.theme === 'dark' ? 'light' : 'dark';
                   this.applyTheme(this.theme);
                   localStorage.setItem('kanban-theme', this.theme);
               });
       
               // Form da coluna
               document.getElementById('form-coluna').addEventListener('submit', (e) => {
                   e.preventDefault();
                   const id = document.getElementById('coluna-id').value;
                   const nome = document.getElementById('nome-coluna').value;
                   const cor = document.getElementById('cor-coluna').value;
       
                   if (id) {
                       this.controller.editarColuna(parseInt(id), nome, cor);
                   } else {
                       this.controller.adicionarColuna(nome, cor);
                   }
       
                   bootstrap.Modal.getInstance(document.getElementById('modalColuna')).hide();
                   document.getElementById('form-coluna').reset();
                   document.getElementById('coluna-id').value = '';
               });
       
               // Form do cartão
               document.getElementById('form-modal-cartao').addEventListener('submit', (e) => {
                   e.preventDefault();
                   const id = document.getElementById('modal-cartao-id').value;
                   const colunaId = parseInt(document.getElementById('modal-cartao-coluna-id').value);
                   const titulo = document.getElementById('modal-cartao-titulo').value;
                   const descricao = document.getElementById('modal-cartao-descricao').value;
                   const status = document.getElementById('modal-cartao-status').value;
                   const prioridade = document.getElementById('modal-cartao-prioridade').value;
                   const prazo = document.getElementById('modal-cartao-prazo').value;
                   const link = document.getElementById('modal-cartao-link').value;
                   const tagsString = document.getElementById('modal-cartao-tags').value;
                   const obs = document.getElementById('modal-cartao-obs').value;
       
                   // Processar tags
                   const tags = tagsString.split(',')
                       .map(tag => tag.trim())
                       .filter(tag => tag.length > 0);
       
                   // Obter checklist
                   const checklist = Array.from(document.querySelectorAll('.checklist-item'))
                       .map((item, idx) => ({
                           id: idx + 1,
                           text: item.querySelector('.checklist-text').textContent,
                           done: item.querySelector('input[type="checkbox"]').checked
                       }));
       
                   const cartao = {
                       titulo,
                       descricao,
                       status,
                       prioridade,
                       prazo,
                       link,
                       tags,
                       checklist,
                       obs,
                       colunaId
                   };
       
                   if (id) {
                       this.controller.editarCartao(colunaId, parseInt(id), cartao);
                   } else {
                       this.controller.adicionarCartao(cartao);
                   }
       
                   bootstrap.Modal.getInstance(document.getElementById('modalCartao')).hide();
               });
       
               // Adicionar item ao checklist
               document.getElementById('add-checklist-item').addEventListener('click', () => {
                   const input = document.getElementById('novo-checklist-item');
                   if (input.value.trim()) {
                       this.adicionarChecklistItem(input.value, false);
                       input.value = '';
                   }
               });
       
               // Filtros
               document.getElementById('busca').addEventListener('input', this.renderizar.bind(this));
               document.getElementById('filtro-status').addEventListener('change', this.renderizar.bind(this));
               document.getElementById('filtro-prioridade').addEventListener('change', this.renderizar.bind(this));
           }
       
           /**
            * Aplica o tema (claro/escuro) ao documento
            * @param {String} theme Nome do tema ('light' ou 'dark')
            */
           applyTheme(theme) {
               document.body.setAttribute('data-theme', theme);
               const icon = document.getElementById('theme-icon');
               icon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
           }
       
           /**
            * Adiciona um item ao checklist no modal
            * @param {String} text Texto do item
            * @param {Boolean} done Status do item (concluído ou não)
            */
           adicionarChecklistItem(text, done = false) {
               const container = document.getElementById('checklist-container');
               const div = document.createElement('div');
               div.className = 'checklist-item';
       
               const checkbox = document.createElement('input');
               checkbox.type = 'checkbox';
               checkbox.className = 'form-check-input';
               checkbox.checked = done;
       
               const textSpan = document.createElement('span');
               textSpan.className = 'checklist-text ms-2';
               textSpan.textContent = text;
               if (done) textSpan.classList.add('completed');
       
               const removeBtn = document.createElement('button');
               removeBtn.className = 'btn btn-sm btn-outline-danger ms-auto';
               removeBtn.innerHTML = '<i class="fas fa-times"></i>';
               removeBtn.onclick = () => div.remove();
       
               div.appendChild(checkbox);
               div.appendChild(textSpan);
               div.appendChild(removeBtn);
       
               checkbox.addEventListener('change', () => {
                   textSpan.classList.toggle('completed', checkbox.checked);
               });
       
               container.appendChild(div);
           }
       
           /**
            * Renderiza todo o kanban
            */
           renderizar() {
               this.kanbanBoard.innerHTML = '';
       
               // Obter filtros
               const busca = document.getElementById('busca').value.toLowerCase();
               const filtroStatus = document.getElementById('filtro-status').value;
               const filtroPrioridade = document.getElementById('filtro-prioridade').value;
       
               let colunas = this.model.getColunas();
               colunas.sort((a, b) => a.order - b.order);
       
               // Renderizar colunas
               colunas.forEach(coluna => {
                   const colunaEl = this.criarElementoColuna(coluna);
       
                   // Filtrar cartões
                   let cartoes = coluna.cards;
                   if (busca) {
                       cartoes = cartoes.filter(card => 
                           (card.title && card.title.toLowerCase().includes(busca)) || 
                           (card.description && card.description.toLowerCase().includes(busca)) || 
                           (card.obs && card.obs.toLowerCase().includes(busca)) ||
                           (card.tags && card.tags.some(tag => tag.toLowerCase().includes(busca)))
                       );
                   }
       
                   if (filtroStatus) {
                       cartoes = cartoes.filter(card => card.status === filtroStatus);
                   }
       
                   if (filtroPrioridade) {
                       cartoes = cartoes.filter(card => card.priority === filtroPrioridade);
                   }
       
                   // Renderizar cartões
                   cartoes.forEach(cartao => {
                       const cartaoEl = this.criarElementoCartao(cartao, coluna.id);
                       colunaEl.querySelector('.column-cards').appendChild(cartaoEl);
                   });
       
                   this.kanbanBoard.appendChild(colunaEl);
               });
       
               // Atualizar select de colunas
               this.atualizarSelectColunas(colunas);
       
               // Habilitar drag and drop
               this.habilitarDragAndDrop();
           }
       
           /**
            * Cria elemento HTML para uma coluna
            * @param {Object} coluna Dados da coluna
            * @returns {HTMLElement} Elemento da coluna
            */
           criarElementoColuna(coluna) {
               const div = document.createElement('div');
               div.className = 'trello-column';
               div.setAttribute('data-col-id', coluna.id);
               div.style.borderTop = `6px solid ${coluna.color}`;
       
               // Header com título e ações
               const header = document.createElement('div');
               header.style.display = 'flex';
               header.style.justifyContent = 'space-between';
               header.style.alignItems = 'center';
               header.style.marginBottom = '12px';
       
               const title = document.createElement('div');
               title.className = 'column-title';
               title.textContent = coluna.name;
       
               const actions = document.createElement('div');
               actions.innerHTML = `
                   <button class="btn btn-sm btn-outline-primary" onclick="controller.abrirModalCartao(null, ${coluna.id})">
                       <i class="fas fa-plus"></i>
                   </button>
                   <button class="btn btn-sm btn-outline-primary" onclick="controller.abrirModalColuna(${coluna.id})">
                       <i class="fas fa-edit"></i>
                   </button>
                   <button class="btn btn-sm btn-outline-danger" onclick="controller.confirmarRemoverColuna(${coluna.id})">
                       <i class="fas fa-trash"></i>
                   </button>
               `;
       
               header.appendChild(title);
               header.appendChild(actions);
               div.appendChild(header);
       
               // Container para cartões
               const cardsContainer = document.createElement('div');
               cardsContainer.className = 'column-cards';
               div.appendChild(cardsContainer);
       
               return div;
           }
       
           /**
            * Cria elemento HTML para um cartão
            * @param {Object} cartao Dados do cartão
            * @param {Number} colunaId ID da coluna
            * @returns {HTMLElement} Elemento do cartão
            */
           criarElementoCartao(cartao, colunaId) {
               const div = document.createElement('div');
               div.className = `trello-card ${this.getCardColorClass(cartao)}`;
               div.setAttribute('data-card-id', cartao.id);
               div.setAttribute('data-col-id', colunaId);
       
               // Header com título e status
               const header = document.createElement('div');
               header.className = 'd-flex justify-content-between align-items-center';
       
               const title = document.createElement('strong');
               title.textContent = cartao.title;
       
               const statusBadge = document.createElement('span');
               statusBadge.className = `badge bg-${this.getStatusClass(cartao.status)}`;
               statusBadge.textContent = cartao.status;
       
               header.appendChild(title);
               header.appendChild(statusBadge);
               div.appendChild(header);
       
               // Descrição
               if (cartao.description) {
                   const desc = document.createElement('div');
                   desc.className = 'mt-2';
                   desc.textContent = cartao.description;
                   div.appendChild(desc);
               }
       
               // Tags
               if (cartao.tags && cartao.tags.length) {
                   const tagsDiv = document.createElement('div');
                   tagsDiv.className = 'mt-2';
       
                   cartao.tags.forEach(tag => {
                       const tagSpan = document.createElement('span');
                       tagSpan.className = 'tag';
                       tagSpan.textContent = tag;
                       tagSpan.style.backgroundColor = this.getTagColor(tag);
                       tagsDiv.appendChild(tagSpan);
                   });
       
                   div.appendChild(tagsDiv);
               }
       
               // Prioridade
               const priorityBadge = document.createElement('div');
               priorityBadge.className = 'mt-2';
               priorityBadge.innerHTML = `
                   <span class="badge priority-${cartao.priority?.toLowerCase() || 'medium'}">
                       ${cartao.priority || 'Média'}
                   </span>
               `;
               div.appendChild(priorityBadge);
       
               // Prazo
               if (cartao.prazo) {
                   const prazo = document.createElement('div');
                   prazo.className = 'mt-2 small';
       
                   const prazoDate = new Date(cartao.prazo);
                   const today = new Date();
                   const isAtrasado = prazoDate < today && cartao.status !== 'Concluído';
       
                   prazo.innerHTML = `
                       <i class="fas fa-calendar-alt me-1"></i>
                       <span class="${isAtrasado ? 'text-danger' : ''}">
                           ${this.formatarData(cartao.prazo)}
                           ${isAtrasado ? ' (Atrasado)' : ''}
                       </span>
                   `;
                   div.appendChild(prazo);
               }
       
               // Link
               if (cartao.link) {
                   const link = document.createElement('div');
                   link.className = 'mt-2';
                   link.innerHTML = `<a href="${cartao.link}" target="_blank" class="btn btn-sm btn-outline-info">
                       <i class="fas fa-external-link-alt"></i> Visitar
                   </a>`;
                   div.appendChild(link);
               }
       
               // Checklist resumido (se houver)
               if (cartao.checklist && cartao.checklist.length) {
                   const checklistDiv = document.createElement('div');
                   checklistDiv.className = 'mt-2 small';
       
                   const completed = cartao.checklist.filter(item => item.done).length;
                   const total = cartao.checklist.length;
                   const percent = Math.round((completed / total) * 100);
       
                   checklistDiv.innerHTML = `
                       <div class="d-flex justify-content-between align-items-center">
                           <span><i class="fas fa-tasks me-1"></i> ${completed}/${total}</span>
                           <span>${percent}%</span>
                       </div>
                       <div class="progress" style="height: 6px;">
                           <div class="progress-bar" role="progressbar" style="width: ${percent}%"></div>
                       </div>
                   `;
       
                   div.appendChild(checklistDiv);
               }
       
               // Observações
               if (cartao.obs) {
                   const obs = document.createElement('div');
                   obs.className = 'mt-2 small fst-italic text-muted';
                   obs.textContent = cartao.obs;
                   div.appendChild(obs);
               }
       
               // Ações
               const actions = document.createElement('div');
               actions.className = 'mt-3 text-end';
               actions.innerHTML = `
                   <button class="btn btn-sm btn-outline-primary" onclick="controller.abrirModalCartao(${cartao.id}, ${colunaId})">
                       <i class="fas fa-edit"></i>
                   </button>
                   <button class="btn btn-sm btn-outline-success" onclick="controller.duplicarCartao(${cartao.id}, ${colunaId})">
                       <i class="fas fa-copy"></i>
                   </button>
                   <button class="btn btn-sm btn-outline-danger" onclick="controller.confirmarRemoverCartao(${colunaId}, ${cartao.id})">
                       <i class="fas fa-trash"></i>
                   </button>
               `;
               div.appendChild(actions);
       
               return div;
           }
       
           /**
            * Obtém classe de cor para um cartão com base na prioridade
            * @param {Object} cartao Dados do cartão
            * @returns {String} Nome da classe CSS
            */
           getCardColorClass(cartao) {
               const prioridadeMap = {
                   'Alta': 'red',
                   'Média': 'orange',
                   'Baixa': 'green'
               };
               return prioridadeMap[cartao.priority] || 'blue';
           }    /**
           * Gera uma cor consistente para uma tag específica
           * @param {String} tag Nome da tag
           * @returns {String} Código de cor hexadecimal
           */
          getTagColor(tag) {
              // Gerar uma cor consistente baseada na string da tag
              let hash = 0;
              for (let i = 0; i < tag.length; i++) {
                  hash = tag.charCodeAt(i) + ((hash << 5) - hash);
              }
      
              // Converter para um tom mais atraente
              const hue = Math.abs(hash % 360);
              return `hsl(${hue}, 70%, 40%)`;
          }
      
          /**
           * Formata uma data para exibição
           * @param {String} dateStr String de data ISO
           * @returns {String} Data formatada para exibição
           */
          formatarData(dateStr) {
              if (!dateStr) return '';
              const date = new Date(dateStr);
              return date.toLocaleDateString('pt-BR');
          }
      
          /**
           * Atualiza o select de colunas
           * @param {Array} colunas Lista de colunas
           */
          atualizarSelectColunas(colunas) {
              this.selectColunas.innerHTML = '';
              colunas.forEach(col => {
                  const opt = document.createElement('option');
                  opt.value = col.id;
                  opt.textContent = col.name;
                  this.selectColunas.appendChild(opt);
              });
          }
      
          /**
           * Habilita funcionalidade de drag and drop para cartões
           */
          habilitarDragAndDrop() {
              const cartoes = document.querySelectorAll('.trello-card');
              const colunas = document.querySelectorAll('.trello-column');
      
              cartoes.forEach(cartao => {
                  cartao.setAttribute('draggable', 'true');
      
                  cartao.addEventListener('dragstart', e => {
                      e.dataTransfer.setData('text/plain', JSON.stringify({
                          cardId: parseInt(cartao.getAttribute('data-card-id')),
                          colId: parseInt(cartao.getAttribute('data-col-id'))
                      }));
                      cartao.classList.add('dragging');
                  });
      
                  cartao.addEventListener('dragend', () => {
                      cartao.classList.remove('dragging');
                  });
              });
      
              colunas.forEach(coluna => {
                  coluna.addEventListener('dragover', e => {
                      e.preventDefault();
                      coluna.classList.add('drag-over');
                  });
      
                  coluna.addEventListener('dragleave', () => {
                      coluna.classList.remove('drag-over');
                  });
      
                  coluna.addEventListener('drop', e => {
                      e.preventDefault();
                      coluna.classList.remove('drag-over');
      
                      try {
                          const data = JSON.parse(e.dataTransfer.getData('text/plain'));
                          const colunaDestinoId = parseInt(coluna.getAttribute('data-col-id'));
      
                          if (data.colId !== colunaDestinoId) {
                              this.controller.moverCartao(
                                  data.cardId,
                                  data.colId,
                                  colunaDestinoId
                              );
                          }
                      } catch (err) {
                          console.error('Erro no drop:', err);
                      }
                  });
              });
          }
      
          /**
           * Abre o modal de coluna para edição ou criação
           * @param {Object|null} coluna Dados da coluna ou null para nova coluna
           */
          abrirModalColuna(coluna = null) {
              const idInput = document.getElementById('coluna-id');
              const nomeInput = document.getElementById('nome-coluna');
              const corInput = document.getElementById('cor-coluna');
              const modal = document.getElementById('modalColuna');
              const modalTitle = modal.querySelector('.modal-title');
      
              // Resetar form
              document.getElementById('form-coluna').reset();
      
              if (coluna) {
                  // Modo de edição
                  idInput.value = coluna.id;
                  nomeInput.value = coluna.name;
                  corInput.value = coluna.color || '#2563eb';
                  modalTitle.textContent = 'Editar Coluna';
              } else {
                  // Modo de criação
                  idInput.value = '';
                  modalTitle.textContent = 'Nova Coluna';
              }
      
              // Abrir modal
              const modalInstance = new bootstrap.Modal(modal);
              modalInstance.show();
          }
      
          /**
           * Abre o modal de cartão para edição ou criação
           * @param {Object|null} cartao Dados do cartão ou null para novo cartão
           * @param {Number} colunaId ID da coluna para novo cartão
           */
          abrirModalCartao(cartao = null, colunaId = null) {
              const idInput = document.getElementById('modal-cartao-id');
              const tituloInput = document.getElementById('modal-cartao-titulo');
              const descricaoInput = document.getElementById('modal-cartao-descricao');
              const statusSelect = document.getElementById('modal-cartao-status');
              const prioridadeSelect = document.getElementById('modal-cartao-prioridade');
              const prazoInput = document.getElementById('modal-cartao-prazo');
              const linkInput = document.getElementById('modal-cartao-link');
              const tagsInput = document.getElementById('modal-cartao-tags');
              const obsInput = document.getElementById('modal-cartao-obs');
              const colunaSelect = document.getElementById('modal-cartao-coluna-id');
              const checklistContainer = document.getElementById('checklist-container');
              const modal = document.getElementById('modalCartao');
              const modalTitle = modal.querySelector('.modal-title');
      
              // Limpar formulário e checklist
              document.getElementById('form-modal-cartao').reset();
              checklistContainer.innerHTML = '';
      
              if (cartao) {
                  // Modo de edição
                  idInput.value = cartao.id;
                  tituloInput.value = cartao.title || '';
                  descricaoInput.value = cartao.description || '';
                  statusSelect.value = cartao.status || 'Em andamento';
                  prioridadeSelect.value = cartao.priority || 'Média';
                  prazoInput.value = cartao.prazo || '';
                  linkInput.value = cartao.link || '';
                  tagsInput.value = (cartao.tags || []).join(', ');
                  obsInput.value = cartao.obs || '';
                  colunaSelect.value = colunaId;
      
                  // Adicionar itens do checklist
                  if (cartao.checklist && cartao.checklist.length) {
                      cartao.checklist.forEach(item => {
                          this.adicionarChecklistItem(item.text, item.done);
                      });
                  }
      
                  modalTitle.textContent = 'Editar Cartão';
              } else {
                  // Modo de criação
                  idInput.value = '';
                  colunaSelect.value = colunaId || '';
                  modalTitle.textContent = 'Novo Cartão';
              }
      
              // Abrir modal
              const modalInstance = new bootstrap.Modal(modal);
              modalInstance.show();
          }
      
          /**
           * Atualiza os gráficos no dashboard
           * @param {Object} stats Estatísticas do kanban
           */
          atualizarDashboard(stats) {
              // Atualizar valores
              document.getElementById('stat-total').textContent = stats.total;
              document.getElementById('stat-concluidos').textContent = stats.concluidos;
              document.getElementById('stat-andamento').textContent = stats.emAndamento;
              document.getElementById('stat-atrasados').textContent = stats.atrasados;
      
              // Atualizar gráficos
              this.renderizarGraficoStatus(stats.porStatus);
              this.renderizarGraficoPrioridade(stats.porPrioridade);
          }
      
          /**
           * Renderiza gráfico de status
           * @param {Object} data Dados de status
           */
          renderizarGraficoStatus(data) {
              const ctx = document.getElementById('status-chart').getContext('2d');
      
              if (window.statusChart) window.statusChart.destroy();
      
              window.statusChart = new Chart(ctx, {
                  type: 'doughnut',
                  data: {
                      labels: Object.keys(data),
                      datasets: [{
                          data: Object.values(data),
                          backgroundColor: [
                              '#2563eb', // Em andamento
                              '#16a34a', // Concluído
                              '#f59e42', // Aguardando
                              '#ef4444'  // Rejeitado
                          ]
                      }]
                  },
                  options: {
                      responsive: true,
                      plugins: {
                          legend: {
                              position: 'right',
                              labels: {
                                  color: this.theme === 'dark' ? '#fff' : '#333'
                              }
                          }
                      }
                  }
              });
          }
      
          /**
           * Renderiza gráfico de prioridade
           * @param {Object} data Dados de prioridade
           */
          renderizarGraficoPrioridade(data) {
              const ctx = document.getElementById('priority-chart').getContext('2d');
      
              if (window.priorityChart) window.priorityChart.destroy();
      
              window.priorityChart = new Chart(ctx, {
                  type: 'pie',
                  data: {
                      labels: Object.keys(data),
                      datasets: [{
                          data: Object.values(data),
                          backgroundColor: [
                              '#ef4444', // Alta
                              '#f59e42', // Média
                              '#16a34a'  // Baixa
                          ]
                      }]
                  },
                  options: {
                      responsive: true,
                      plugins: {
                          legend: {
                              position: 'right',
                              labels: {
                                  color: this.theme === 'dark' ? '#fff' : '#333'
                              }
                          }
                      }
                  }
              });
          }
      
          /**
           * Renderiza o calendário com eventos baseados nos prazos
           * @param {Array} cards Lista de cartões com prazos
           */
          renderizarCalendario(cards) {
              const calendarEl = document.getElementById('calendar');
      
              if (window.calendar) {
                  window.calendar.destroy();
              }
      
              // Mapear cartões para eventos do calendário
              const eventos = cards
                  .filter(card => card.prazo)
                  .map(card => {
                      const color = card.status === 'Concluído' ? '#16a34a' : 
                                   new Date(card.prazo) < new Date() ? '#ef4444' : '#2563eb';
      
                      return {
                          id: `card-${card.id}`,
                          title: card.title,
                          start: card.prazo,
                          color: color,
                          extendedProps: {
                              description: card.description,
                              status: card.status
                          }
                      };
                  });
      
              // Inicializar calendário
              window.calendar = new FullCalendar.Calendar(calendarEl, {
                  initialView: 'dayGridMonth',
                  locale: 'pt-br',
                  headerToolbar: {
                      left: 'prev,next today',
                      center: 'title',
                      right: 'dayGridMonth,timeGridWeek,listWeek'
                  },
                  events: eventos,
                  eventClick: function(info) {
                      alert(`Cartão: ${info.event.title}\nStatus: ${info.event.extendedProps.status}\nDescrição: ${info.event.extendedProps.description || 'Sem descrição'}`);
                  },
                  themeSystem: 'bootstrap',
                  height: 'auto'
              });
      
              window.calendar.render();
          }
      
          /**
           * Exibe um toast de notificação
           * @param {String} message Mensagem a ser exibida
           * @param {String} type Tipo do toast (success, danger, warning, info)
           */
          exibirToast(message, type = 'info') {
              const container = document.getElementById('toast-container');
              const toast = document.createElement('div');
              toast.className = `toast kanban-toast bg-${type} text-white show`;
              toast.innerHTML = `
                  <div class="toast-body">
                      <i class="fas fa-${this.getToastIcon(type)} me-2"></i>
                      ${message}
                  </div>
              `;
      
              container.appendChild(toast);
      
              // Remover toast após a animação
              setTimeout(() => {
                  toast.remove();
              }, 3000);
          }
      
          /**
           * Obtém ícone para toast baseado no tipo
           * @param {String} type Tipo do toast
           * @returns {String} Nome do ícone FontAwesome
           */
          getToastIcon(type) {
              const iconMap = {
                  'success': 'check-circle',
                  'danger': 'exclamation-circle',
                  'warning': 'exclamation-triangle',
                  'info': 'info-circle'
              };
      
              return iconMap[type] || 'info-circle';
          }
      
          /**
           * Registra uma atividade no console
           * @param {String} message Mensagem a ser registrada
           */
          logAtividade(message) {
              const logDiv = document.getElementById('console-log');
              const hora = new Date().toLocaleTimeString('pt-BR', {
                  hour: '2-digit',
                  minute: '2-digit',
                  second: '2-digit'
              });
      
              const linha = document.createElement('div');
              linha.className = 'fade-in';
              linha.innerHTML = `<span class="text-muted">[${hora}]</span> ${message}`;
      
              logDiv.appendChild(linha);
              logDiv.scrollTop = logDiv.scrollHeight;
          }
      
          /**
           * Exibe modal de confirmação
           * @param {String} message Mensagem de confirmação
           * @param {String} title Título do modal
           * @param {Function} onConfirm Função a ser executada ao confirmar
           */
          exibirConfirmacao(message, title, onConfirm) {
              const modal = document.getElementById('confirmationModal');
              document.getElementById('confirmationTitle').textContent = title;
              document.getElementById('confirmationMessage').textContent = message;
      
              const confirmButton = document.getElementById('confirmationConfirm');
      
              // Remover event listeners anteriores
              const newConfirmButton = confirmButton.cloneNode(true);
              confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
      
              // Adicionar novo event listener
              newConfirmButton.addEventListener('click', () => {
                  onConfirm();
                  bootstrap.Modal.getInstance(modal).hide();
              });
      
              // Exibir modal
              const modalInstance = new bootstrap.Modal(modal);
              modalInstance.show();
          }
      }
      
      /**
       * Módulo Controller - Gerencia as interações do usuário
       */
      class KanbanController {
          constructor(model, view) {
              this.model = model;
              this.view = view;
      
              // Adicionar listener para atualizações do modelo
              this.model.addListener(() => {
                  this.view.renderizar();
              });
          }
      
          /**
           * Inicializa o controller
           */
          inicializar() {
              this.view.renderizar();
              this.view.logAtividade('Aplicação carregada com sucesso!');
          }
      
          /**
           * Adiciona uma nova coluna
           * @param {String} nome Nome da coluna
           * @param {String} cor Cor da coluna
           */
          adicionarColuna(nome, cor) {
              const id = this.model.adicionarColuna(nome, cor);
              this.view.logAtividade(`Coluna "${nome}" adicionada com sucesso.`);
              this.view.exibirToast(`Coluna "${nome}" adicionada!`, 'success');
              return id;
          }
      
          /**
           * Edita uma coluna existente
           * @param {Number} id ID da coluna
           * @param {String} nome Novo nome
           * @param {String} cor Nova cor
           */
          editarColuna(id, nome, cor) {
              const sucesso = this.model.editarColuna(id, nome, cor);
      
              if (sucesso) {
                  this.view.logAtividade(`Coluna #${id} editada para "${nome}".`);
                  this.view.exibirToast(`Coluna atualizada!`, 'success');
              } else {
                  this.view.exibirToast(`Erro ao editar coluna!`, 'danger');
              }
      
              return sucesso;
          }
      
          /**
           * Confirma e remove uma coluna
           * @param {Number} id ID da coluna
           */
          confirmarRemoverColuna(id) {
              const colunas = this.model.getColunas();
              const coluna = colunas.find(c => c.id === id);
      
              if (!coluna) return;
      
              const temCartoes = coluna.cards && coluna.cards.length > 0;
              const mensagem = temCartoes 
                  ? `A coluna "${coluna.name}" contém ${coluna.cards.length} cartões que também serão removidos. Deseja continuar?` 
                  : `Deseja remover a coluna "${coluna.name}"?`;
      
              this.view.exibirConfirmacao(
                  mensagem,
                  'Remover coluna?',
                  () => this.removerColuna(id, coluna.name)
              );
          }
      
          /**
           * Remove uma coluna
           * @param {Number} id ID da coluna
           * @param {String} nome Nome da coluna (para log)
           */
          removerColuna(id, nome) {
              this.model.removerColuna(id);
              this.view.logAtividade(`Coluna "${nome}" removida.`);
              this.view.exibirToast(`Coluna removida!`, 'info');
          }
      
          /**
           * Adiciona um novo cartão
           * @param {Object} cartao Dados do cartão
           */
          adicionarCartao(cartao) {
              const id = this.model.adicionarCartao(cartao);
      
              if (id) {
                  this.view.logAtividade(`Cartão "${cartao.titulo}" adicionado.`);
                  this.view.exibirToast(`Cartão adicionado com sucesso!`, 'success');
              } else {
                  this.view.exibirToast(`Erro ao adicionar cartão!`, 'danger');
              }
      
              return id;
          }
      
          /**
           * Edita um cartão existente
           * @param {Number} colunaId ID da coluna
           * @param {Number} cartaoId ID do cartão
           * @param {Object} cartao Novos dados
           */
          editarCartao(colunaId, cartaoId, cartao) {
              const sucesso = this.model.editarCartao(colunaId, cartaoId, cartao);
      
              if (sucesso) {
                  this.view.logAtividade(`Cartão #${cartaoId} atualizado.`);
                  this.view.exibirToast(`Cartão atualizado com sucesso!`, 'success');
              } else {
                  this.view.exibirToast(`Erro ao atualizar cartão!`, 'danger');
              }
      
              return sucesso;
          }
      
          /**
           * Confirma e remove um cartão
           * @param {Number} colunaId ID da coluna
           * @param {Number} cartaoId ID do cartão
           */
          confirmarRemoverCartao(colunaId, cartaoId) {
              const colunas = this.model.getColunas();
              const coluna = colunas.find(c => c.id === colunaId);
      
              if (!coluna) return;
      
              const cartao = coluna.cards.find(c => c.id === cartaoId);
      
              if (!cartao) return;
      
              this.view.exibirConfirmacao(
                  `Deseja remover o cartão "${cartao.title}"?`,
                  'Remover cartão?',
                  () => this.removerCartao(colunaId, cartaoId, cartao.title)
              );
          }
      
          /**
           * Remove um cartão
           * @param {Number} colunaId ID da coluna
           * @param {Number} cartaoId ID do cartão
           * @param {String} titulo Título do cartão (para log)
           */
          removerCartao(colunaId, cartaoId, titulo) {
              const sucesso = this.model.removerCartao(colunaId, cartaoId);
      
              if (sucesso) {
                  this.view.logAtividade(`Cartão "${titulo}" removido.`);
                  this.view.exibirToast(`Cartão removido!`, 'info');
              } else {
                  this.view.exibirToast(`Erro ao remover cartão!`, 'danger');
              }
          }
      
          /**
           * Move um cartão para outra coluna
           * @param {Number} cartaoId ID do cartão
           * @param {Number} colunaOrigemId ID da coluna de origem
           * @param {Number} colunaDestinoId ID da coluna de destino
           */
          moverCartao(cartaoId, colunaOrigemId, colunaDestinoId) {
              const colunas = this.model.getColunas();
              const colunaOrigem = colunas.find(c => c.id === colunaOrigemId);
              const colunaDestino = colunas.find(c => c.id === colunaDestinoId);
      
              if (!colunaOrigem || !colunaDestino) return false;
      
              const cartao = colunaOrigem.cards.find(c => c.id === cartaoId);
      
              if (!cartao) return false;
      
              const sucesso = this.model.moverCartao(cartaoId, colunaOrigemId, colunaDestinoId);
      
              if (sucesso) {
                  this.view.logAtividade(`Cartão "${cartao.title}" movido de "${colunaOrigem.name}" para "${colunaDestino.name}".`);
                  this.view.exibirToast(`Cartão movido com sucesso!`, 'success');
              }
      
              return sucesso;
          }
      
          /**
           * Duplica um cartão existente
           * @param {Number} cartaoId ID do cartão
           * @param {Number} colunaId ID da coluna
           */
          duplicarCartao(cartaoId, colunaId) {
              const colunas = this.model.getColunas();
              const coluna = colunas.find(c => c.id === colunaId);
      
              if (!coluna) return false;
      
              const cartao = coluna.cards.find(c => c.id === cartaoId);
      
              if (!cartao) return false;
      
              // Criar uma cópia do cartão com novo ID
              const cartaoDuplicado = {
                  titulo: `${cartao.title} (Cópia)`,
                  descricao: cartao.description,
                  status: cartao.status,
                  prioridade: cartao.priority,
                  prazo: cartao.prazo,
                  link: cartao.link,
                  tags: [...(cartao.tags || [])],
                  checklist: [...(cartao.checklist || [])].map(item => ({...item, done: false})),
                  obs: cartao.obs,
                  colunaId: colunaId
              };
      
              const novoId = this.model.adicionarCartao(cartaoDuplicado);
      
              if (novoId) {
                  this.view.logAtividade(`Cartão "${cartao.title}" duplicado.`);
                  this.view.exibirToast(`Cartão duplicado com sucesso!`, 'success');
              } else {
                  this.view.exibirToast(`Erro ao duplicar cartão!`, 'danger');
              }
      
              return novoId;
          }
      
          /**
           * Abre o modal de coluna
           * @param {Number} colunaId ID da coluna para edição, ou null para nova coluna
           */
          abrirModalColuna(colunaId = null) {
              if (colunaId) {
                  const colunas = this.model.getColunas();
                  const coluna = colunas.find(c => c.id === colunaId);
                  if (coluna) {
                      this.view.abrirModalColuna(coluna);
                  }
              } else {
                  this.view.abrirModalColuna();
              }
          }
      
          /**
           * Abre o modal de cartão
           * @param {Number} cartaoId ID do cartão para edição, ou null para novo cartão
           * @param {Number} colunaId ID da coluna
           */
          abrirModalCartao(cartaoId = null, colunaId = null) {
              if (cartaoId) {
                  const colunas = this.model.getColunas();
                  const coluna = colunas.find(c => c.id === colunaId);
      
                  if (coluna) {
                      const cartao = coluna.cards.find(c => c.id === cartaoId);
                      if (cartao) {
                          this.view.abrirModalCartao(cartao, colunaId);
                          return;
                      }
                  }
              }
      
              this.view.abrirModalCartao(null, colunaId);
          }
      
          /**
           * Atualiza o dashboard com estatísticas
           */
          atualizarDashboard() {
              const stats = this.model.getEstatisticas();
              this.view.atualizarDashboard(stats);
          }
      
          /**
           * Atualiza o calendário com cartões
           */
          atualizarCalendario() {
              const cards = this.model.getColunas().flatMap(c => c.cards);
              this.view.renderizarCalendario(cards);
          }
      
          /**
           * Exporta dados do kanban
           */
          exportar() {
              const dados = this.model.exportarDados();
              const blob = new Blob([dados], {type: 'application/json'});
              const url = URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = `kanban_airdrop_${new Date().toISOString().slice(0, 10)}.json`;
              a.click();
              URL.revokeObjectURL(url);
      
              this.view.logAtividade('Dados do kanban exportados.');
              this.view.exibirToast('Kanban exportado com sucesso!', 'success');
          }
      
          /**
           * Importa dados para o kanban
           * @param {Event} event Evento de input de arquivo
           */
          importar(event) {
              const file = event.target.files[0];
              if (!file) return;
      
              const reader = new FileReader();
              reader.onload = (e) => {
                  try {
                      const sucesso = this.model.importarDados(e.target.result);
      
                      if (sucesso) {
                          this.view.renderizar();
                          this.view.logAtividade('Dados importados com sucesso.');
                          this.view.exibirToast('Kanban importado com sucesso!', 'success');
                      } else {
                          this.view.exibirToast('Erro ao importar dados!', 'danger');
                      }
                  } catch (error) {
                      console.error('Erro na importação:', error);
                      this.view.exibirToast('Arquivo de importação inválido!', 'danger');
                  }
              };
      
              reader.readAsText(file);
          }
      }
      
      // Inicialização da aplicação
      const model = new KanbanModel();
      const controller = new KanbanController(null, null); // Inicialização temporária
      const view = new KanbanView(model, controller);
      
      // Completar a inicialização do controller
      controller.view = view;
      controller.model = model;
      
      // Exportar controller para uso global
      window.controller = controller;
      
      // Inicializar controller
      controller.inicializar();
      
      // Funções globais para uso em eventos HTML
      window.exportarKanban = () => controller.exportar();
      window.importarKanban = (event) => controller.importar(event);
      
      // Configuração de listeners para modais
      document.getElementById('dashboardModal').addEventListener('shown.bs.modal', () => {
          controller.atualizarDashboard();
      });
      
      document.getElementById('calendarModal').addEventListener('shown.bs.modal', () => {
          controller.atualizarCalendario();
      });
      
      // Função global para exibir toast - utilidade para debugging
      window.toast = (msg, type) => view.exibirToast